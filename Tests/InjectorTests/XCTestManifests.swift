#if !canImport(ObjectiveC)
import XCTest

extension ContainerBasicTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ContainerBasicTests = [
        ("testExplicitResolution", testExplicitResolution),
        ("testImplicitResolution", testImplicitResolution),
        ("testOptionalResolution", testOptionalResolution),
        ("testOptionalResolutionNotFound", testOptionalResolutionNotFound),
        ("testRegistrationOverwritting", testRegistrationOverwritting),
        ("testRegistrationWithResolver", testRegistrationWithResolver),
        ("testResolution", testResolution),
        ("testResolutionProperties", testResolutionProperties),
        ("testServiceDependencyResolution", testServiceDependencyResolution),
    ]
}

extension ContainerNameTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ContainerNameTests = [
        ("testContainerInvalidNames", testContainerInvalidNames),
        ("testContainerNamesUnnamedNotFound", testContainerNamesUnnamedNotFound),
        ("testContainerNamesWithUnnamed", testContainerNamesWithUnnamed),
        ("testContainerValidNames", testContainerValidNames),
    ]
}

extension ContainerProtocolTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ContainerProtocolTests = [
        ("testMultipeProtocolsWithForwarding", testMultipeProtocolsWithForwarding),
        ("testMultipeProtocolsWithImplements", testMultipeProtocolsWithImplements),
        ("testProtocolWithExplicitResolution", testProtocolWithExplicitResolution),
        ("testProtocolWithInferedResolution", testProtocolWithInferedResolution),
        ("testProtocolWithOptionalResolution", testProtocolWithOptionalResolution),
    ]
}

extension ContainerScopeNameTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ContainerScopeNameTests = [
        ("testContainerScopeNameApplication", testContainerScopeNameApplication),
        ("testContainerScopeNameGraph", testContainerScopeNameGraph),
        ("testContainerScopeNameShared", testContainerScopeNameShared),
        ("testContainerScopeNameUnique", testContainerScopeNameUnique),
    ]
}

extension ContainerScopeReferenceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ContainerScopeReferenceTests = [
        ("testContainerScopeGraph", testContainerScopeGraph),
        ("testContainerScopeShared", testContainerScopeShared),
        ("testContainerScopeSingleton", testContainerScopeSingleton),
        ("testContainerScopeUnique", testContainerScopeUnique),
    ]
}

extension ContainerScopeValueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ContainerScopeValueTests = [
        ("testContainerScopeApplication", testContainerScopeApplication),
        ("testContainerScopeGraph", testContainerScopeGraph),
        ("testContainerScopeShared", testContainerScopeShared),
        ("testContainerScopeUnique", testContainerScopeUnique),
    ]
}

extension ContainerStaticTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ContainerStaticTests = [
        ("testExplicitResolution", testExplicitResolution),
        ("testImplicitResolution", testImplicitResolution),
        ("testOptionalResolution", testOptionalResolution),
        ("testOptionalResolutionNotFound", testOptionalResolutionNotFound),
        ("testRegistrationOverwritting", testRegistrationOverwritting),
        ("testRegistrationWithResolver", testRegistrationWithResolver),
        ("testResolution", testResolution),
        ("testResolutionProperties", testResolutionProperties),
        ("testServiceDependencyResolution", testServiceDependencyResolution),
    ]
}

extension InjectorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InjectorTests = [
        ("testBasicInjection", testBasicInjection),
        ("testLazyInjection", testLazyInjection),
        ("testNamedInjection", testNamedInjection),
        ("testOptionalInjection", testOptionalInjection),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ContainerBasicTests.__allTests__ContainerBasicTests),
        testCase(ContainerNameTests.__allTests__ContainerNameTests),
        testCase(ContainerProtocolTests.__allTests__ContainerProtocolTests),
        testCase(ContainerScopeNameTests.__allTests__ContainerScopeNameTests),
        testCase(ContainerScopeReferenceTests.__allTests__ContainerScopeReferenceTests),
        testCase(ContainerScopeValueTests.__allTests__ContainerScopeValueTests),
        testCase(ContainerStaticTests.__allTests__ContainerStaticTests),
        testCase(InjectorTests.__allTests__InjectorTests),
    ]
}
#endif
